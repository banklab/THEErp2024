simulate_one_gen_mig_logistic <- function(N_a, N_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a) {
# adult migrants arrive and are added to 'a' population
N_a_mig <- rpois(1, mig_rate_a) # stochastic immigration
N_a <- N_a + N_a_mig
# determine total population size
N_total <- N_a+N_A
# reproduction occurs according to decay rates and selection coefficients
offsp_a <- rpois(1, N_a * (1-decay_rate)) # independent of carrying capacity
offsp_A <- rpois(1, N_A + N_A*(sel_coeff-decay_rate)*(1-N_total/carrying_capacity))
# randomly kill individuals if carrying capacity is exceeded
offsp_total <- offsp_A + offsp_a
if(offsp_total > carrying_capacity)
{
offsp_a <- rbinom(1,carrying_capacity,c(offsp_a,offsp_A)/offsp_total)
offsp_A <- carrying_capacity-offsp_a
}
# draw new mutants according to Poisson distribution
mut_a_to_A <- rpois(1, offsp_a * mut_rate)
# determine new population sizes of wild type and mutant
N_a_new <- offsp_a - mut_a_to_A
N_A_new <- offsp_A + mut_a_to_A
return(c(N_a_new, N_A_new))
}
# Test the function
print(simulate_one_gen_mig_logistic(N_a=50, N_A=0, carrying_capacity=50, decay_rate=0.1, sel_coeff=0.3, mut_rate=0.1, mig_rate_a=1))
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
print(pop_new)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 5
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
# show the last few lines of the data table
print(tail(output))
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
print(pop_new)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 5
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
print(pop_new)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 50
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
print(pop_new)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 100
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
N_total <- sum(pop_new)
print(N_total)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 100
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
N_total <- sum(pop_new)
print(N_total)
if (N_total == carrying_capacity) break
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 100
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
gen <- 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
gen <- gen+1
N_total <- sum(pop_new)
print(N_total)
print(gen)
if (N_total == carrying_capacity) break
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(gen)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 100
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
gen <- 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
gen <- gen+1
N_total <- sum(pop_new)
print(N_total)
print(gen)
if (N_total == carrying_capacity) break
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(gen)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 100
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
gen <- 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
gen <- gen+1
N_total <- sum(pop_new)
print(N_total)
print(gen)
if (N_total == carrying_capacity) break
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(gen)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 100
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
gen <- 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
gen <- gen+1
N_total <- sum(pop_new)
print(N_total)
print(gen)
if (N_total == carrying_capacity) break
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(gen)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 100
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
print(output)
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
gen <- 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
gen <- gen+1
N_total <- sum(pop_new)
if (N_total == carrying_capacity) break
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(gen)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 100
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
print(output)
simulate_pop_mig_logistic <- function(N_init_a, N_init_A, carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a, t_max) {
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# start counting generations
gen <- 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen_mig_logistic(pop_new[1],pop_new[2],carrying_capacity, decay_rate, sel_coeff, mut_rate, mig_rate_a)
# adding one generation to counter
gen <- gen+1
# calculate population size
N_total <- sum(pop_new)
# stop when carrying capacity is reached
if (N_total == carrying_capacity) break
}
return(gen)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 100
# create your simulation data
output <- simulate_pop_mig_logistic(1000,0,1000,0.1,0.3,0.001,3,max_gen)
print(output)
